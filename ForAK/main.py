import flet as ftfrom flet import Colors, Iconsclass MicroprocessorSimulator:    def __init__(self):        self.memory = [0] * 16        self.registers = {"ACC": 0, "R1": 0, "R2": 0, "PC": 0, "FLAGS": 0}        self.program = []        self.halted = False        self.breakpoints = set()        self.history = []        self.stack = []        self.interrupt_enabled = False    def load_program(self, text):        self.program.clear()        for line in text.split("\n"):            line = line.strip().upper()            if line and not line.startswith(";"):                self.program.append(tuple(line.split()))        self.reset()    def reset(self):        self.registers = {"ACC": 0, "R1": 0, "R2": 0, "PC": 0, "FLAGS": 0}        self.memory = [0] * 16        self.halted = False        self.stack = []        self.history.clear()    def step(self):        if self.halted:            return "Програма зупинена. Скиньте для повторного запуску."        if self.registers["PC"] >= len(self.program):            return "Програма завершена."        # Save state for history        self.history.append({            "registers": self.registers.copy(),            "memory": self.memory.copy(),            "pc": self.registers["PC"]        })        instr = self.program[self.registers["PC"]]        opcode = instr[0]        args = instr[1:] if len(instr) > 1 else []        log = f"Виконання: {' '.join(instr)}\n"        try:            if opcode == "LOAD":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    self.registers["ACC"] = self.memory[addr]                    log += f"ACC := MEM[{addr}] = {self.memory[addr]}\n"                else:                    self.registers["ACC"] = int(args[0])                    log += f"ACC := {args[0]}\n"            elif opcode == "STORE":                addr = int(args[0][1:-1]) if args[0].startswith("[") else int(args[0])                self.memory[addr] = self.registers["ACC"]                log += f"MEM[{addr}] := ACC = {self.registers['ACC']}\n"            elif opcode == "ADD":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    self.registers["ACC"] += self.memory[addr]                    log += f"ACC += MEM[{addr}] = {self.memory[addr]}\n"                else:                    self.registers["ACC"] += int(args[0])                    log += f"ACC += {args[0]}\n"            elif opcode == "SUB":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    self.registers["ACC"] -= self.memory[addr]                    log += f"ACC -= MEM[{addr}] = {self.memory[addr]}\n"                else:                    self.registers["ACC"] -= int(args[0])                    log += f"ACC -= {args[0]}\n"            elif opcode == "MUL":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    self.registers["ACC"] *= self.memory[addr]                    log += f"ACC *= MEM[{addr}] = {self.memory[addr]}\n"                else:                    self.registers["ACC"] *= int(args[0])                    log += f"ACC *= {args[0]}\n"            elif opcode == "DIV":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    if self.memory[addr] == 0:                        raise ZeroDivisionError("Ділення на нуль")                    self.registers["ACC"] //= self.memory[addr]                    log += f"ACC //= MEM[{addr}] = {self.memory[addr]}\n"                else:                    if int(args[0]) == 0:                        raise ZeroDivisionError("Ділення на нуль")                    self.registers["ACC"] //= int(args[0])                    log += f"ACC //= {args[0]}\n"            elif opcode == "AND":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    self.registers["ACC"] &= self.memory[addr]                else:                    self.registers["ACC"] &= int(args[0])            elif opcode == "OR":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    self.registers["ACC"] |= self.memory[addr]                else:                    self.registers["ACC"] |= int(args[0])            elif opcode == "CMP":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    value = self.memory[addr]                else:                    value = int(args[0])                result = self.registers["ACC"] - value                flags = 0                if result == 0:                    flags |= 1  # Zero flag                if result < 0:                    flags |= 2  # Negative flag                if (self.registers["ACC"] ^ value) & (self.registers["ACC"] ^ result) & 0x80:                    flags |= 4  # Overflow flag                self.registers["FLAGS"] = flags                log += f"Порівняно ACC з {value}, прапорці: {bin(flags)}\n"            elif opcode == "JMP":                self.registers["PC"] = int(args[0])                log += f"Перехід до інструкції {args[0]}\n"                return log            elif opcode == "JZ":                if self.registers["FLAGS"] & 1:                    self.registers["PC"] = int(args[0])                    log += f"Перехід до {args[0]} (Z прапорець встановлено)\n"                    return log                else:                    log += "Без переходу (Z прапорець не встановлено)\n"            elif opcode == "JNZ":                if not (self.registers["FLAGS"] & 1):                    self.registers["PC"] = int(args[0])                    log += f"Перехід до {args[0]} (Z прапорець не встановлено)\n"                    return log                else:                    log += "Без переходу (Z прапорець встановлено)\n"            elif opcode == "PUSH":                self.stack.append(self.registers["ACC"])                log += f"Додано {self.registers['ACC']} до стеку\n"            elif opcode == "POP":                if not self.stack:                    raise IndexError("Стек порожній")                self.registers["ACC"] = self.stack.pop()                log += f"Вилучено {self.registers['ACC']} зі стеку\n"            elif opcode == "BIN":                self.registers["ACC"] = int(bin(self.registers["ACC"])[2:], 2)                log += f"Перетворено ACC до двійкового представлення: {bin(self.registers['ACC'])[2:]}\n"            elif opcode == "HEX":                self.registers["ACC"] = int(hex(self.registers["ACC"])[2:], 16)                log += f"Перетворено ACC до шістнадцяткового представлення: {hex(self.registers['ACC'])[2:]}\n"            elif opcode == "DEC":                # Припускаємо, що ACC містить бінарне число у десятковому представленні                binary_str = str(self.registers["ACC"])                self.registers["ACC"] = int(binary_str, 2)                log += f"Перетворено двійкове {binary_str} до десяткового: {self.registers['ACC']}\n"            elif opcode == "HALT":                self.halted = True                log += "Програма зупинена.\n"                return log            self.registers["PC"] += 1        except Exception as e:            log += f"Помилка: {str(e)}\n"            self.halted = True            return log        return logdef main(page: ft.Page):    page.title = "Симулятор мікропроцесора"    page.scroll = ft.ScrollMode.AUTO    page.theme_mode = ft.ThemeMode.LIGHT    page.window_width = 1200    page.window_height = 800    page.padding = 20    # Theme Colors    primary_color = Colors.BLUE    secondary_color = Colors.INDIGO    theme_bg_color = Colors.BLUE_GREY_50    page.bgcolor = theme_bg_color    cpu = MicroprocessorSimulator()    # Create UI elements    input_program = ft.TextField(        label="Введіть програму (одна інструкція на рядок)",        multiline=True,        min_lines=15,        max_lines=20,        expand=True,        border_color=Colors.BLUE_800,        value="""; Приклад програмиLOAD 5STORE [0]LOAD 3ADD [0]STORE [1]HALT""",    )    console_output = ft.TextField(        value="Консольний вивід...\n",        multiline=True,        read_only=True,        expand=True,        bgcolor=Colors.WHITE,        border_color=Colors.GREY_400,        height=300,    )    # Number System Conversion Panel    def create_conversion_panel():        input_decimal = ft.TextField(            label="Десяткове",            width=150,            on_change=lambda e: update_conversion(e, "dec")        )        input_binary = ft.TextField(            label="Двійкове",            width=150,            on_change=lambda e: update_conversion(e, "bin")        )        input_hex = ft.TextField(            label="Шістнадцяткове",            width=150,            on_change=lambda e: update_conversion(e, "hex")        )        def update_conversion(e, source):            try:                if source == "dec" and input_decimal.value:                    decimal_value = int(input_decimal.value)                    input_binary.value = bin(decimal_value)[2:]                    input_hex.value = hex(decimal_value)[2:].upper()                elif source == "bin" and input_binary.value:                    binary_value = int(input_binary.value, 2)                    input_decimal.value = str(binary_value)                    input_hex.value = hex(binary_value)[2:].upper()                elif source == "hex" and input_hex.value:                    hex_value = int(input_hex.value, 16)                    input_decimal.value = str(hex_value)                    input_binary.value = bin(hex_value)[2:]                page.update()            except ValueError:                pass        copy_to_acc_btn = ft.ElevatedButton(            "Копіювати в ACC",            on_click=lambda e: copy_to_acc(input_decimal.value),            style=ft.ButtonStyle(                bgcolor=Colors.BLUE_600,                color=Colors.WHITE            )        )        def copy_to_acc(value):            if value:                try:                    cpu.registers["ACC"] = int(value)                    console_output.value += f"\nСкопійовано {value} до ACC\n"                    update_displays()                except ValueError:                    console_output.value += "\nНеправильне значення для ACC\n"        return ft.Card(            content=ft.Container(                content=ft.Column([                    ft.Text("Конвертер систем числення", size=16, weight=ft.FontWeight.BOLD),                    ft.Row([input_decimal, input_binary, input_hex], spacing=10),                    copy_to_acc_btn                ], spacing=15),                padding=15,            ),            elevation=4,        )    conversion_panel = create_conversion_panel()    # Create memory display    def create_memory_display():        return ft.Card(            content=ft.Container(                content=ft.Column(                    [                        ft.Text("Пам'ять", size=16, weight=ft.FontWeight.BOLD),                        ft.GridView(                            [],                            runs_count=4,                            spacing=10,                            run_spacing=10,                            expand=True,                        )                    ],                    expand=True,                ),                padding=15,            ),            elevation=4,        )    # Create register display    def create_register_display():        return ft.Card(            content=ft.Container(                content=ft.Column(                    [                        ft.Text("Регістри", size=16, weight=ft.FontWeight.BOLD),                        ft.Row([], spacing=10)                    ],                    expand=True,                ),                padding=15,            ),            elevation=4,        )    # Create flags display    def create_flags_display():        return ft.Card(            content=ft.Container(                content=ft.Column(                    [                        ft.Text("Прапорці", size=16, weight=ft.FontWeight.BOLD),                        ft.Row([], spacing=10)                    ],                    spacing=10,                ),                padding=15,            ),            elevation=4,        )    # Create stack display    def create_stack_display():        return ft.Card(            content=ft.Container(                content=ft.Column(                    [                        ft.Text("Стек", size=16, weight=ft.FontWeight.BOLD),                        ft.Column([], scroll=ft.ScrollMode.AUTO, height=150)                    ],                    spacing=10,                ),                padding=15,            ),            elevation=4,        )    # Create PC display    def create_pc_display():        return ft.Card(            content=ft.Container(                content=ft.Column([                    ft.Text("Лічильник програми", size=14, weight=ft.FontWeight.BOLD),                    ft.Text("0", size=16)                ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),                width=120,                height=80,                bgcolor=Colors.ORANGE_50,                border_radius=10,                padding=5,                alignment=ft.alignment.center,            ),            elevation=4,        )    # Initialize displays    memory_display = create_memory_display()    register_display = create_register_display()    flags_display = create_flags_display()    stack_display = create_stack_display()    pc_display = create_pc_display()    def update_displays():        # Update memory display        memory_grid = memory_display.content.content.controls[1]        memory_grid.controls = []        for i, value in enumerate(cpu.memory):            # Show also binary and hex representation            bin_value = bin(value)[2:]            hex_value = hex(value)[2:].upper()            highlight = i == cpu.registers["PC"] if cpu.registers["PC"] < len(cpu.memory) else False            memory_grid.controls.append(                ft.Container(                    content=ft.Column([                        ft.Text(f"Адр: {i}", size=12, weight=ft.FontWeight.BOLD),                        ft.Text(f"Дес: {value}", size=12),                        ft.Text(f"Дв: {bin_value}", size=12),                        ft.Text(f"16: {hex_value}", size=12)                    ], spacing=2),                    width=120,                    height=110,                    bgcolor=Colors.BLUE_100 if highlight else Colors.BLUE_50,                    border_radius=5,                    border=ft.border.all(2, Colors.BLUE_400 if highlight else Colors.BLUE_200),                    padding=5,                    alignment=ft.alignment.center,                )            )        # Update register display        register_row = register_display.content.content.controls[1]        register_row.controls = []        for name, value in cpu.registers.items():            if name == "FLAGS":                continue            # Add binary and hex representation for register values            bin_value = bin(value)[2:]            hex_value = hex(value)[2:].upper()            register_row.controls.append(                ft.Container(                    content=ft.Column([                        ft.Text(name, size=14, weight=ft.FontWeight.BOLD),                        ft.Text(f"Дес: {value}", size=14),                        ft.Text(f"Дв: {bin_value}", size=12),                        ft.Text(f"16: {hex_value}", size=12)                    ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),                    width=120,                    height=120,                    bgcolor=Colors.GREEN_50,                    border_radius=10,                    border=ft.border.all(1, Colors.GREEN_200),                    padding=5,                    alignment=ft.alignment.center,                )            )        # Update flags display        flags_row = flags_display.content.content.controls[1]        flags_row.controls = []        flags = cpu.registers["FLAGS"]        flag_names = ["Z", "N", "O", "C"]        for i, name in enumerate(flag_names):            flags_row.controls.append(                ft.Container(                    content=ft.Column([                        ft.Text(name, size=14, weight=ft.FontWeight.BOLD),                        ft.Text("1" if flags & (1 << i) else "0", size=16)                    ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),                    width=60,                    height=60,                    bgcolor=Colors.RED_100 if flags & (1 << i) else Colors.RED_50,                    border_radius=10,                    border=ft.border.all(1, Colors.RED_200),                    padding=5,                    alignment=ft.alignment.center,                )            )        # Update stack display        stack_col = stack_display.content.content.controls[1]        stack_col.controls = []        for i, value in enumerate(reversed(cpu.stack)):            bin_value = bin(value)[2:]            hex_value = hex(value)[2:].upper()            stack_col.controls.append(                ft.Container(                    content=ft.Column([                        ft.Text(f"[{len(cpu.stack) - 1 - i}]", size=12, weight=ft.FontWeight.BOLD),                        ft.Text(f"Дес: {value}", size=12),                        ft.Text(f"Дв: {bin_value}", size=12),                        ft.Text(f"16: {hex_value}", size=12)                    ], spacing=2),                    border=ft.border.all(1, Colors.GREY_300),                    border_radius=5,                    padding=5,                    margin=ft.margin.only(bottom=5),                    bgcolor=Colors.GREY_50                )            )            if i >= 5:  # Limit stack display to 6 items                break        # Update PC display        pc_display.content.content.controls[1].value = str(cpu.registers["PC"])        page.update()    def load_click(e):        cpu.load_program(input_program.value)        console_output.value = "Консольний вивід:\nПрограма успішно завантажена.\n"        console_output.value += f"Програма має {len(cpu.program)} інструкцій.\n"        console_output.value += "Готово до виконання (натисніть Крок).\n"        update_displays()    def step_click(e):        result = cpu.step()        console_output.value += "\n" + "-" * 50 + "\n"        console_output.value += f"Крок: PC={cpu.registers['PC']}\n"        console_output.value += result        update_displays()    def run_click(e):        while not cpu.halted and cpu.registers["PC"] < len(cpu.program):            step_click(e)            if cpu.registers["PC"] in cpu.breakpoints:                console_output.value += f"\nТочка зупинки на PC={cpu.registers['PC']}\n"                break    def reset_click(e):        cpu.reset()        console_output.value = "Консольний вивід:\nСимулятор скинуто. Програма перезавантажена.\n"        update_displays()    def add_breakpoint(e):        try:            bp = int(breakpoint_input.value)            cpu.breakpoints.add(bp)            console_output.value += f"\nТочка зупинки додана на PC={bp}\n"            breakpoint_input.value = ""            page.update()        except ValueError:            console_output.value += "\nНеправильна адреса точки зупинки\n"    def clear_console(e):        console_output.value = "Консоль очищена.\n"        page.update()    # Example program dropdown    example_programs = {        "Базове додавання": """; Базова програма додаванняLOAD 5STORE [0]LOAD 3ADD [0]STORE [1]HALT""",        "Цикл лічильника": """; Цикл з лічильникомLOAD 0     ; Ініціалізація лічильникаSTORE [0]  ; Зберігання лічильника в пам'ятіLOAD 10    ; Завантаження лімітуSTORE [1]  ; Зберігання ліміту; Початок циклуLOAD [0]   ; Завантаження лічильникаADD 1      ; ІнкрементSTORE [0]  ; Зберігання оновленого лічильникаCMP [1]    ; Порівняння з лімітомJZ 8       ; Якщо рівно, перехід до кінцяJMP 4      ; Інакше, повернення до циклуHALT       ; Кінець програми""",        "Конвертація чисел": """; Приклад конвертації чиселLOAD 42    ; Завантаження десяткового числа; Двійкове представлення буде доступне в інтерфейсі; Шістнадцяткове представлення буде доступне в інтерфейсіHALT"""    }    def example_program_change(e):        selected = example_dropdown.value        if selected in example_programs:            input_program.value = example_programs[selected]            page.update()    example_dropdown = ft.Dropdown(        label="Приклади програм",        options=[ft.dropdown.Option(key) for key in example_programs.keys()],        width=250,        on_change=example_program_change    )    # Breakpoint input    breakpoint_input = ft.TextField(label="Адреса точки зупинки", width=150)    # Main UI layout    page.add(        ft.Row(            [                ft.Text("Симулятор мікропроцесора", size=28, weight=ft.FontWeight.BOLD, color=primary_color),            ],            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,        ),        ft.Divider(height=1, color=Colors.BLUE_200),        ft.Row(            [                ft.Column(                    [                        ft.Row(                            [                                ft.Text("Редактор програм", size=20, weight=ft.FontWeight.BOLD),                                example_dropdown,                            ],                            alignment=ft.MainAxisAlignment.SPACE_BETWEEN,                        ),                        input_program,                        ft.Row(                            [                                ft.ElevatedButton(                                    "Завантажити",                                    on_click=load_click,                                    style=ft.ButtonStyle(                                        bgcolor=primary_color,                                        color=Colors.WHITE,                                    ),                                    icon=Icons.UPLOAD_FILE,                                ),                                ft.ElevatedButton(                                    "Крок",                                    on_click=step_click,                                    style=ft.ButtonStyle(                                        bgcolor=secondary_color,                                        color=Colors.WHITE,                                    ),                                    icon=Icons.KEYBOARD_DOUBLE_ARROW_RIGHT,                                ),                                ft.ElevatedButton(                                    "Запуск",                                    on_click=run_click,                                    style=ft.ButtonStyle(                                        bgcolor=Colors.GREEN_600,                                        color=Colors.WHITE,                                    ),                                    icon=Icons.PLAY_ARROW,                                ),                                ft.ElevatedButton(                                    "Скинути",                                    on_click=reset_click,                                    style=ft.ButtonStyle(                                        bgcolor=Colors.RED_400,                                        color=Colors.WHITE,                                    ),                                    icon=Icons.REFRESH,                                ),                            ],                            spacing=10,                        ),                        ft.Row(                            [                                breakpoint_input,                                ft.ElevatedButton(                                    "Точка зупинки",                                    on_click=add_breakpoint,                                    style=ft.ButtonStyle(                                        bgcolor=Colors.AMBER_600,                                        color=Colors.WHITE,                                    ),                                    icon=Icons.FLAG,                                ),                                ft.ElevatedButton(                                    "Очистити консоль",                                    on_click=clear_console,                                    style=ft.ButtonStyle(                                        bgcolor=Colors.GREY_500,                                        color=Colors.WHITE,                                    ),                                    icon=Icons.CLEAR_ALL,                                ),                            ],                            spacing=10,                        ),                    ],                    expand=True,                ),                ft.VerticalDivider(width=1, color=Colors.BLUE_200),                ft.Column(                    [                        ft.Text("Стан процесора", size=20, weight=ft.FontWeight.BOLD),                        ft.Row(                            [                                register_display,                                flags_display,                                pc_display,                            ],                            spacing=10,                            alignment=ft.MainAxisAlignment.START,                        ),                        ft.Row(                            [                                memory_display,                                stack_display,                            ],                            spacing=10,                            alignment=ft.MainAxisAlignment.START,                        ),                        conversion_panel,                    ],                    expand=True,                ),            ],            spacing=10,            expand=True,        ),        ft.Container(            content=ft.Column(                [                    ft.Text("Консольний вивід", size=20, weight=ft.FontWeight.BOLD),                    console_output,                ],                spacing=10,            ),            expand=True,        ),    )    # Initialize displays    update_displays()ft.app(target=main)