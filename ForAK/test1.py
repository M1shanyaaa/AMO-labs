import flet as ftclass MicroprocessorSimulator:    def __init__(self):        self.memory = [0] * 16        self.registers = {"ACC": 0, "R1": 0, "R2": 0, "PC": 0, "FLAGS": 0}        self.program = []        self.halted = False        self.breakpoints = set()        self.history = []        self.stack = []        self.interrupt_enabled = False    def load_program(self, text):        self.program.clear()        for line in text.split("\n"):            line = line.strip().upper()            if line and not line.startswith(";"):                self.program.append(tuple(line.split()))        self.reset()    def reset(self):        self.registers = {"ACC": 0, "R1": 0, "R2": 0, "PC": 0, "FLAGS": 0}        self.memory = [0] * 16        self.halted = False        self.stack = []        self.history.clear()    def step(self):        if self.halted:            return "Програма зупинена. Скиньте, щоб запустити знову."        if self.registers["PC"] >= len(self.program):            return "Програма завершена."        self.history.append({            "registers": self.registers.copy(),            "memory": self.memory.copy(),            "pc": self.registers["PC"]        })        instr = self.program[self.registers["PC"]]        opcode = instr[0]        args = instr[1:] if len(instr) > 1 else []        log = f"Виконується: {' '.join(instr)}\n"        try:            if opcode == "LOAD":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    value = self.memory[addr]                else:                    value = int(args[0])                self.registers["ACC"] = value                self.update_flags(value)                log += f"ACC := {value}\n"            elif opcode == "STORE":                addr = int(args[0][1:-1]) if args[0].startswith("[") else int(args[0])                self.memory[addr] = self.registers["ACC"]                log += f"MEM[{addr}] := ACC = {self.registers['ACC']}\n"            elif opcode == "ADD":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    value = self.memory[addr]                else:                    value = int(args[0])                result = self.registers["ACC"] + value                self.update_flags(result)                self.registers["ACC"] = result & 0xFFFF                log += f"ACC += {value}\n"            elif opcode == "SUB":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    value = self.memory[addr]                else:                    value = int(args[0])                result = self.registers["ACC"] - value                self.update_flags(result)                self.registers["ACC"] = result & 0xFFFF                log += f"ACC -= {value}\n"            elif opcode == "MUL":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    value = self.memory[addr]                else:                    value = int(args[0])                result = self.registers["ACC"] * value                self.update_flags(result)                self.registers["ACC"] = result & 0xFFFF                log += f"ACC *= {value}\n"            elif opcode == "DIV":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    divisor = self.memory[addr]                else:                    divisor = int(args[0])                if divisor == 0:                    raise ZeroDivisionError("Ділення на нуль")                result = self.registers["ACC"] // divisor                self.update_flags(result)                self.registers["ACC"] = result                log += f"ACC //= {divisor}\n"            elif opcode == "NOT":                result = ~self.registers["ACC"]                self.update_flags(result)                self.registers["ACC"] = result & 0xFFFF                log += f"ACC = ~ACC = {self.registers['ACC']}\n"            elif opcode == "SHL":                shift = int(args[0])                result = self.registers["ACC"] << shift                self.update_flags(result)                self.registers["ACC"] = result & 0xFFFF                log += f"ACC <<= {shift}\n"            elif opcode == "SHR":                shift = int(args[0])                result = self.registers["ACC"] >> shift                self.update_flags(result)                self.registers["ACC"] = result                log += f"ACC >>= {shift}\n"            elif opcode == "MOV":                reg = args[0]                if args[1].startswith("["):                    addr = int(args[1][1:-1])                    self.registers[reg] = self.memory[addr]                else:                    self.registers[reg] = int(args[1])                log += f"{reg} := {self.registers[reg]}\n"            elif opcode == "PUSH":                self.stack.append(self.registers["ACC"])                log += f"Додано {self.registers['ACC']} до стеку\n"            elif opcode == "POP":                if not self.stack:                    raise IndexError("Порожній стек")                self.registers["ACC"] = self.stack.pop()                self.update_flags(self.registers["ACC"])                log += f"Взято {self.registers['ACC']} зі стеку\n"            elif opcode == "CALL":                self.stack.append(self.registers["PC"] + 1)                self.registers["PC"] = int(args[0])                log += f"Виклик підпрограми за адресою {args[0]}\n"                return log            elif opcode == "RET":                if not self.stack:                    raise IndexError("Порожній стек")                self.registers["PC"] = self.stack.pop()                log += "Повернення з підпрограми\n"                return log            elif opcode == "CMP":                if args[0].startswith("["):                    addr = int(args[0][1:-1])                    value = self.memory[addr]                else:                    value = int(args[0])                result = self.registers["ACC"] - value                self.update_flags(result)                log += f"Порівняно ACC з {value}, FLAGS = {bin(self.registers['FLAGS'])}\n"            elif opcode == "JMP":                self.registers["PC"] = int(args[0])                log += f"Перехід до інструкції {args[0]}\n"                return log            elif opcode == "JZ":                if self.registers["FLAGS"] & 1:                    self.registers["PC"] = int(args[0])                    log += f"Перехід до {args[0]} (прапорець Z встановлено)\n"                    return log                else:                    log += "Перехід не виконано (прапорець Z не встановлено)\n"            elif opcode == "JNZ":                if not (self.registers["FLAGS"] & 1):                    self.registers["PC"] = int(args[0])                    log += f"Перехід до {args[0]} (прапорець Z не встановлено)\n"                    return log                else:                    log += "Перехід не виконано (прапорець Z встановлено)\n"            elif opcode == "JC":                if self.registers["FLAGS"] & 8:                    self.registers["PC"] = int(args[0])                    log += f"Перехід до {args[0]} (прапорець C встановлено)\n"                    return log                else:                    log += "Перехід не виконано (прапорець C не встановлено)\n"            elif opcode == "JNC":                if not (self.registers["FLAGS"] & 8):                    self.registers["PC"] = int(args[0])                    log += f"Перехід до {args[0]} (прапорець C не встановлено)\n"                    return log                else:                    log += "Перехід не виконано (прапорець C встановлено)\n"            elif opcode == "INT":                if self.interrupt_enabled:                    self.stack.append(self.registers["PC"] + 1)                    self.registers["PC"] = int(args[0])                    log += f"Виклик обробника переривання за адресою {args[0]}\n"                    return log                else:                    log += "Переривання вимкнено, INT ігнорується\n"            elif opcode == "IRET":                if not self.stack:                    raise IndexError("Порожній стек")                self.registers["PC"] = self.stack.pop()                log += "Повернення з переривання\n"                return log            elif opcode == "STI":                self.interrupt_enabled = True                log += "Переривання увімкнено\n"            elif opcode == "CLI":                self.interrupt_enabled = False                log += "Переривання вимкнено\n"            elif opcode == "NOP":                log += "Пуста операція\n"            elif opcode == "HALT":                self.halted = True                log += "Програма зупинена.\n"                return log            else:                log += f"Невідома інструкція: {opcode}\n"            self.registers["PC"] += 1        except Exception as e:            log += f"Помилка: {str(e)}\n"            self.halted = True            return log        return log    def update_flags(self, result):        self.registers["FLAGS"] = 0        if result == 0:            self.registers["FLAGS"] |= 1 << 0  # Zero (Z)        if result < 0:            self.registers["FLAGS"] |= 1 << 1  # Negative (N)        if result < -32768 or result > 32767:            self.registers["FLAGS"] |= 1 << 2  # Overflow (O)        if result > 0xFFFF:            self.registers["FLAGS"] |= 1 << 3  # Carry (C)def main(page: ft.Page):    page.title = "Симулятор мікропроцесора"    page.scroll = ft.ScrollMode.AUTO    page.theme_mode = ft.ThemeMode.LIGHT    page.window_width = 1200    page.window_height = 800    page.padding = 20    cpu = MicroprocessorSimulator()    # Елементи інтерфейсу    input_program = ft.TextField(        label="Введіть програму (по одній інструкції на рядок)",        multiline=True,        min_lines=12,        max_lines=15,        expand=True,        border_color=ft.Colors.BLUE_800,        value="""; Приклад програмиLOAD 5STORE [0]LOAD 3ADD [0]STORE [1]HALT""",    )    console_output = ft.TextField(        value="Тут буде виведено інформацію...\n",        multiline=True,        read_only=True,        min_lines=8,        max_lines=10,        expand=True,        bgcolor=ft.Colors.BLACK12,        border_color=ft.Colors.GREY_400,    )    # Відображення пам'яті    memory_display = ft.Column(        [            ft.Text("Пам'ять", size=16, weight=ft.FontWeight.BOLD),            ft.Row(                [                    ft.Container(                        content=ft.Text(f"{i}: 0", text_align=ft.TextAlign.CENTER),                        width=70,                        height=30,                        bgcolor=ft.Colors.BLUE_50,                        border_radius=5,                        border=ft.border.all(1, ft.Colors.BLUE_200),                        padding=5,                        alignment=ft.alignment.center,                    ) for i in range(16)                ],                wrap=True,                spacing=5,                run_spacing=5            )        ],        spacing=10    )    # Відображення регістрів    register_display = ft.Row(        [            ft.Container(                content=ft.Column([                    ft.Text(name, size=14, weight=ft.FontWeight.BOLD),                    ft.Text("0", size=16)                ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),                width=80,                height=70,                bgcolor=ft.Colors.GREEN_50,                border_radius=10,                border=ft.border.all(1, ft.Colors.GREEN_200),                padding=5,                alignment=ft.alignment.center,            ) for name in ["ACC", "R1", "R2"]        ],        spacing=10    )    # Відображення прапорців    flags_display = ft.Row(        [            ft.Container(                content=ft.Column([                    ft.Text(name, size=16, weight=ft.FontWeight.BOLD),                    ft.Text("0", size=18)                ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),                width=60,                height=70,                bgcolor=ft.Colors.RED_50,                border_radius=12,                border=ft.border.all(1, ft.Colors.RED_200),                padding=10,                alignment=ft.alignment.center,            ) for name in ["Z", "N", "O", "C"]        ],        spacing=10    )    # Відображення PC    pc_display = ft.Container(        content=ft.Column([            ft.Text("PC", size=14, weight=ft.FontWeight.BOLD),            ft.Text("0", size=16)        ], alignment=ft.MainAxisAlignment.CENTER, horizontal_alignment=ft.CrossAxisAlignment.CENTER),        width=80,        height=70,        bgcolor=ft.Colors.ORANGE_50,        border_radius=10,        border=ft.border.all(1, ft.Colors.ORANGE_200),        padding=5,        alignment=ft.alignment.center,    )    # Відображення стеку    stack_display = ft.Column(        [            ft.Text("Стек", size=16, weight=ft.FontWeight.BOLD),            ft.ListView(                height=100,                spacing=2,                padding=5,            )        ],        spacing=5    )    def update_displays():        # Оновлення пам'яті        memory_containers = memory_display.controls[1].controls        for i, value in enumerate(cpu.memory):            highlight = i == cpu.registers["PC"] if cpu.registers["PC"] < len(cpu.memory) else False            memory_containers[i].content.value = f"{i}: {value}"            memory_containers[i].bgcolor = ft.Colors.BLUE_100 if highlight else ft.Colors.BLUE_50            memory_containers[i].border = ft.border.all(2, ft.Colors.BLUE_400 if highlight else ft.Colors.BLUE_200)        # Оновлення регістрів        for i, (name, value) in enumerate(                [("ACC", cpu.registers["ACC"]), ("R1", cpu.registers["R1"]), ("R2", cpu.registers["R2"])]):            register_display.controls[i].content.controls[1].value = str(value)        # Оновлення прапорців        flags = cpu.registers["FLAGS"]        flag_names = ["Z", "N", "O", "C"]        for i, name in enumerate(flag_names):            flag_value = "1" if flags & (1 << i) else "0"            flag_container = flags_display.controls[i]            flag_container.content.controls[1].value = flag_value            flag_container.bgcolor = ft.Colors.RED_100 if flag_value == "1" else ft.Colors.RED_50            flag_container.update()        # Оновлення PC        pc_display.content.controls[1].value = str(cpu.registers["PC"])        # Оновлення стеку        stack_list = stack_display.controls[1]        stack_list.controls = []        for i, value in enumerate(reversed(cpu.stack)):            stack_list.controls.append(ft.Text(f"[{len(cpu.stack) - 1 - i}]: {value}"))        page.update()    def load_click(e):        cpu.load_program(input_program.value)        console_output.value = "Інформація:\nПрограму завантажено успішно.\n"        console_output.value += f"Програма містить {len(cpu.program)} інструкцій.\n"        console_output.value += "Готово до виконання (натисніть Крок).\n"        update_displays()    def step_click(e):        result = cpu.step()        console_output.value += "\n" + "-" * 30 + "\n"        console_output.value += f"Крок: PC={cpu.registers['PC']}\n"        console_output.value += result        update_displays()    def run_click(e):        while not cpu.halted and cpu.registers["PC"] < len(cpu.program):            step_click(e)            if cpu.registers["PC"] in cpu.breakpoints:                console_output.value += f"\nЗупинка на точці зупину при PC={cpu.registers['PC']}\n"                break    def reset_click(e):        cpu.reset()        console_output.value = "Інформація:\nСимулятор скинуто. Програму перезавантажено.\n"        update_displays()    def add_breakpoint(e):        try:            bp = int(breakpoint_input.value)            cpu.breakpoints.add(bp)            console_output.value += f"\nДодано точку зупину при PC={bp}\n"            breakpoint_input.value = ""            page.update()        except ValueError:            console_output.value += "\nНекоректна адреса точки зупину\n"    # Введення точки зупину    breakpoint_input = ft.TextField(label="ТЗ", width=60)    # Розмітка інтерфейсу    page.add(        ft.Column(            [                ft.Text("Симулятор мікропроцесора",                        size=24,                        weight=ft.FontWeight.BOLD,                        color=ft.Colors.BLUE_800),                ft.Row(                    [                        # Ліва колонка з програмою та кнопками                        ft.Column(                            [                                input_program,                                ft.Row(                                    [                                        ft.ElevatedButton(                                            "Завантажити",                                            icon=ft.Icons.UPLOAD,                                            on_click=load_click,                                            style=ft.ButtonStyle(                                                bgcolor=ft.Colors.BLUE_600,                                                color=ft.Colors.WHITE                                            )                                        ),                                        ft.ElevatedButton(                                            "Крок",                                            icon=ft.Icons.PLAY_ARROW,                                            on_click=step_click,                                            style=ft.ButtonStyle(                                                bgcolor=ft.Colors.GREEN_600,                                                color=ft.Colors.WHITE                                            )                                        ),                                        ft.ElevatedButton(                                            "Виконати",                                            icon=ft.Icons.FAST_FORWARD,                                            on_click=run_click,                                            style=ft.ButtonStyle(                                                bgcolor=ft.Colors.PURPLE_600,                                                color=ft.Colors.WHITE                                            )                                        ),                                        ft.ElevatedButton(                                            "Скинути",                                            icon=ft.Icons.REFRESH,                                            on_click=reset_click,                                            style=ft.ButtonStyle(                                                bgcolor=ft.Colors.ORANGE_600,                                                color=ft.Colors.WHITE                                            )                                        ),                                        breakpoint_input,                                        ft.ElevatedButton(                                            "Додати ТЗ",                                            icon=ft.Icons.ADD_CIRCLE,                                            on_click=add_breakpoint,                                            style=ft.ButtonStyle(                                                bgcolor=ft.Colors.RED_600,                                                color=ft.Colors.WHITE                                            )                                        ),                                    ],                                    spacing=5                                ),                            ],                            expand=3,                            spacing=10                        ),                        # Права колонка зі станом                        ft.Column(                            [                                ft.Row(                                    [                                        ft.Column(                                            [                                                ft.Text("Регістри", size=16, weight=ft.FontWeight.BOLD),                                                register_display                                            ]                                        ),                                        ft.Column(                                            [                                                ft.Text("Прапорці", size=16, weight=ft.FontWeight.BOLD),                                                flags_display                                            ]                                        ),                                        pc_display                                    ],                                    spacing=15,                                    alignment=ft.MainAxisAlignment.START                                ),                                stack_display,                                console_output,                            ],                            expand=2,                            spacing=15                        )                    ],                    spacing=20,                    alignment=ft.MainAxisAlignment.START,                ),                memory_display            ],            spacing=15,            expand=True        )    )ft.app(target=main)