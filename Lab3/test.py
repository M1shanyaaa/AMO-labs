import flet as ftimport numpy as npimport matplotlib.pyplot as pltimport timedef aitken_interpolation(x, y, xp):    n = len(x)    p = np.copy(y)    for k in range(1, n):        for i in range(n - k):            p[i] = ((xp - x[i + k]) * p[i] + (x[i] - xp) * p[i + 1]) / (x[i] - x[i + k])    return p[0]def selected_function(x):    return np.sin(x)**2def make_graph(a, b, n, graph_container, error_graph_container, page):    try:        a = float(a)        b = float(b)        n = int(n)        func = sin_function if selected_func == "sin(x)" else sin_squared_function        x_nodes = np.linspace(a, b, n)        y_nodes = selected_function(x_nodes)        x_values = np.linspace(a, b, 200)        y_theoretical = selected_function(x_values)        y_interpolated_aitken = np.array(            [aitken_interpolation(x_nodes, y_nodes, x) for x in x_values])        # Графік основної функції та інтерполяції        plt.figure(figsize=(8, 5))        plt.plot(x_values, y_theoretical, label='sin^2(x)', linestyle='--', color='blue')        plt.plot(x_values, y_interpolated_aitken, label='Інтерполяція Ейткена', color='red')        plt.scatter(x_nodes, y_nodes, color='black', label='вузли інтерполяції')        plt.xlabel("x")        plt.ylabel("y")        plt.legend()        plt.title("Інтерполяція: Теоретична функція vs Інтерполяція Ейткена")        plt.grid()        graph_path = f"plot_{time.time()}.png"        plt.savefig(graph_path)        plt.close()        img = ft.Image(src=graph_path, width=600, height=400)        graph_container.controls.clear()        graph_container.controls.append(img)        graph_container.update()        # Графік похибки інтерполяції для різних ступенів        plt.figure(figsize=(8, 5))        degrees = [2, 3, 4, 5, 7]        for degree in degrees:            x_nodes_degree = np.linspace(a, b, degree)            y_nodes_degree = selected_function(x_nodes_degree)            y_interpolated_degree = np.array([aitken_interpolation(x_nodes_degree, y_nodes_degree, x) for x in x_values])            error = np.abs(y_theoretical - y_interpolated_degree)            plt.plot(x_values, error, label=f'Похибка для ступеня {degree}')        plt.xlabel("x")        plt.ylabel("Похибка")        plt.title("Похибка інтерполяції для різних ступенів")        plt.legend()        plt.grid()        error_graph_path = f"error_plot_{time.time()}.png"        plt.savefig(error_graph_path)        plt.close()        error_img = ft.Image(src=error_graph_path, width=600, height=400)        error_graph_container.controls.clear()        error_graph_container.controls.append(error_img)        error_graph_container.update()        # Додавання таблиці похибки        x_sample = (a + b) / 2        y_exact = func(x_sample)        y_interp = aitken_interpolation(x_nodes, y_nodes, x_sample)        error_value = abs(y_exact - y_interp)        error_table = ft.DataTable(            columns=[ft.DataColumn(ft.Text("x")), ft.DataColumn(ft.Text("Точне значення")),                     ft.DataColumn(ft.Text("Інтерполяційне значення")), ft.DataColumn(ft.Text("Похибка"))],            rows=[                ft.DataRow(                    cells=[                        ft.DataCell(ft.Text(f"{x_sample:.4f}")),                        ft.DataCell(ft.Text(f"{y_exact:.6f}")),                        ft.DataCell(ft.Text(f"{y_interp:.6f}")),                        ft.DataCell(ft.Text(f"{error_value:.6f}"))                    ]                )            ]        )        error_table_container.controls.clear()        error_table_container.controls.append(error_table)        error_table_container.update()        page.update()    except ValueError:        print("Помилка введення: перевірте, чи правильно введені значення.")def main(page: ft.Page):    page.bgcolor = "white"    page.theme = ft.Theme(color_scheme_seed="black")    page.title = "Лабораторна робота №3"    input_field_a = ft.TextField(label="Введіть a", bgcolor="white", color="black")    input_field_b = ft.TextField(label="Введіть b", bgcolor="white", color="black")    input_field_n = ft.TextField(label="Введіть n (кількість вузлових точок)", bgcolor="white", color="black")    result_text = ft.Text("Результат: ", bgcolor="white", color="black")    graph_container = ft.Column()    error_graph_container = ft.Column()    main_tab = ft.Column(        controls=[        ft.Text("Інтерполяція виразу за рекурентним співвідношенням Ейткена \n\n  Введіть ітервал для обрахунку [a;b]:", bgcolor="white", color="black"),        input_field_a,        input_field_b,        input_field_n,        ft.ElevatedButton("Вивід графіків", on_click=lambda _: make_graph(input_field_a.value, input_field_b.value, input_field_n.value, graph_container, error_graph_container, page), bgcolor="white", color="black"),        result_text,        graph_container,        ft.Divider(),        ft.Text("Похибка інтерполяції для різних ступенів:", bgcolor="white", color="black"),        error_graph_container,], scroll=ft.ScrollMode.ALWAYS    )    algorithm_tab = ft.Column([        ft.Text("Автор: \n   Рибачок Михайло Володимирович \n   ІО-34 Варіант 17 \n  Лабораторна робота 3", size=24,                weight=ft.FontWeight.BOLD, color="black"),    ])    algorithm = ft.Column([        ft.Text(),    ])    tabs = ft.Tabs(        selected_index=0,        tabs=[            ft.Tab(text="Головна", content=algorithm_tab),            ft.Tab(text="Інтерполяція виразу за рекурентним співвідношенням Ейткена", content=ft.Container(content=main_tab)),            ft.Tab(text="Алгоритми", content=algorithm)        ]    )    page.add(ft.Container(content=tabs, expand=True))ft.app(target=main)