import flet as ftimport numpy as npdef main(page: ft.Page):    page.title = "Метод верхньої релаксації (SOR)"    page.window_width = 800    page.window_height = 600    page.scroll = "adaptive"    matrix_size = ft.Ref[ft.TextField]()    omega = ft.Ref[ft.TextField]()    tolerance = ft.Ref[ft.TextField]()    max_iterations = ft.Ref[ft.TextField]()    matrix_inputs = ft.Ref[ft.Column]()    vector_inputs = ft.Ref[ft.Column]()    vector_fields = ft.Ref[ft.Row]()    results = ft.Ref[ft.Column]()    def show_snackbar(message: str):        page.snack_bar = ft.SnackBar(ft.Text(message))        page.snack_bar.open = True        page.update()    def is_diagonally_dominant(A):        violations = []        for i in range(len(A)):            diag = abs(A[i, i])            row_sum = sum(abs(A[i, j]) for j in range(len(A)) if j != i)            if diag <= row_sum:                violations.append(i)        return violations    def create_matrix_inputs(e):        try:            size = int(matrix_size.current.value)            if size < 1 or size > 10:                raise ValueError("Розмір масиву повинен бути від 1 до 10")            matrix_inputs.current.controls.clear()            vector_inputs.current.controls.clear()            matrix_inputs.current.controls.append(                ft.Text("Матриця коефіцієнтів A:", weight=ft.FontWeight.BOLD))            # Правильно сформована матриця для n = 3            example_values = [                [20, 1, 2],                [3, 20, 1],                [2, 3, 20]            ] if size == 3 else None            for i in range(size):                row = ft.Row()                for j in range(size):                    value = str(example_values[i][j]) if example_values and i < len(example_values) and j < len(                        example_values[i]) else f"{np.random.randint(1, 10)}"                    row.controls.append(                        ft.TextField(width=100, height=50, text_align=ft.TextAlign.CENTER, value=value, keyboard_type=ft.KeyboardType.NUMBER))                matrix_inputs.current.controls.append(row)            vector_inputs.current.controls.append(ft.Text("Вектор вільних членів b:", weight=ft.FontWeight.BOLD))            example_b = [42, 1, 3] if size == 3 else None            vector_fields.current = ft.Row()            for i in range(size):                value = str(example_b[i]) if example_b and i < len(example_b) else f"{np.random.randint(0, 10)}"                vector_fields.current.controls.append(                    ft.TextField(width=100, height=50, text_align=ft.TextAlign.CENTER, value=value, keyboard_type=ft.KeyboardType.NUMBER))            vector_inputs.current.controls.append(vector_fields.current)            vector_inputs.current.controls.append(                ft.Row([ft.ElevatedButton(                        "Розрахувати", on_click=calculate_solution, icon=ft.Icons.CALCULATE, color=ft.Colors.WHITE, bgcolor=ft.Colors.BLUE)]))            page.update()        except ValueError as ex:            show_snackbar(str(ex))    def calculate_solution(e):        try:            size = int(matrix_size.current.value)            w = float(omega.current.value)            tol = float(tolerance.current.value)            max_iter = int(max_iterations.current.value)            A = np.zeros((size, size))            for i in range(size):                for j in range(size):                    A[i, j] = float(matrix_inputs.current.controls[i + 1].controls[j].value)            b = np.zeros(size)            for i in range(size):                b[i] = float(vector_fields.current.controls[i].value)            violations = is_diagonally_dominant(A)            if violations:                rows = ", ".join([str(i + 1) for i in violations])                show_snackbar(f"Попередження: Немає діагональної домінації в рядках: {rows}")                return            x0 = np.zeros(size)            solution, iterations, error = sor_method(A, b, w, x0, max_iter, tol)            results.current.controls.clear()            results.current.controls.append(ft.Text("Результати розрахунку:", size=20, weight=ft.FontWeight.BOLD, color=ft.Colors.BLUE))            results.current.controls.append(ft.Text(f"Кількість ітерацій: {iterations}"))            results.current.controls.append(ft.Text(f"Досягнута похибка: {error:.6f}"))            results.current.controls.append(ft.Text("Розв'язок системи:", weight=ft.FontWeight.BOLD))            for i in range(size):                results.current.controls.append(ft.Text(f"x{i + 1} = {solution[i]:.6f}"))            page.update()        except ValueError as ex:            show_snackbar(f"Помилка: {str(ex)}")    def sor_method(A, b, omega, initial_guess, max_iterations, tolerance):        n = len(b)        x = initial_guess.copy()        for iteration in range(max_iterations):            x_old = x.copy()            for i in range(n):                sigma = sum(A[i, j] * (x[j] if j < i else x_old[j]) for j in range(n) if j != i)                x[i] = (1 - omega) * x_old[i] + (omega / A[i, i]) * (b[i] - sigma)            current_error = np.linalg.norm(x - x_old)            if current_error < tolerance:                return x, iteration + 1, current_error        return x, max_iterations, np.linalg.norm(x - x_old)    page.add(        ft.Column(controls=[                ft.Text("Автор: \n   Рибачок Михайло Володимирович \n   ІО-34 Варіант 17 \n  Лабораторна робота 5", size=24, weight=ft.FontWeight.BOLD, color="white"),                ft.Divider(),                ft.Text("Метод верхньої релаксації (SOR)", size=24, weight=ft.FontWeight.BOLD),                ft.Text("Розв'язання систем лінійних алгебраїчних рівнянь", size=16),                ft.Divider(),                ft.Text("Приклад системи з умовою:", weight=ft.FontWeight.BOLD),                ft.Text("20x₁ + 1x₂ + 2x₃ = 42"),                ft.Text("3x₁ + 20x₂ + 1x₃ = 1"),                ft.Text("2x₁ + 3x₂ + 20x₃ = 3"),                ft.Text("Розв'язок: x₁ = 2, x₂ = -2, x₃ = 1"),                ft.Divider(),                ft.Row(controls=[                        ft.TextField(ref=matrix_size, label="Розмір системи (n)", width=150, keyboard_type=ft.KeyboardType.NUMBER, value="3"),                        ft.TextField(ref=omega, label="Параметр релаксації ω (1 < ω < 2)", width=200, keyboard_type=ft.KeyboardType.NUMBER, value="1.1"),                        ft.TextField(ref=tolerance, label="Точність (tolerance)", width=150, keyboard_type=ft.KeyboardType.NUMBER, value="0.000001"),                        ft.TextField(ref=max_iterations, label="Макс. ітерацій", width=150, keyboard_type=ft.KeyboardType.NUMBER, value="1000"),                        ft.ElevatedButton("Створити матрицю", on_click=create_matrix_inputs, icon=ft.Icons.CREATE)                    ]),                ft.Column(ref=matrix_inputs),                ft.Column(ref=vector_inputs),                ft.Column(ref=results)            ], spacing=20)    )ft.app(target=main)