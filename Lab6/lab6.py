class TuringMachine:    def __init__(self):        # Ініціалізація машини Тьюрінга для віднімання в системі з основою 6        self.tape = []  # стрічка        self.head_position = 0  # позиція головки        self.state = 'q0'  # початковий стан        self.final_state = 'qf'  # кінцевий стан        # Таблиця переходів: {(стан, символ): (новий_стан, новий_символ, рух)}        # Рух: 'L' - вліво, 'R' - вправо, 'S' - залишитись на місці        self.transition_table = self.create_transition_table()    def create_transition_table(self):        # Створення таблиці переходів для віднімання чисел у системі з основою 6        table = {}        # Алфавіт системи числення з основою 6: 0, 1, 2, 3, 4, 5        # Також використовуємо ' ' (пробіл) як роздільник і '#' як маркер        # q0 - початковий стан: шукаємо крайню праву цифру другого числа        table[('q0', '0')] = ('q0', '0', 'R')        table[('q0', '1')] = ('q0', '1', 'R')        table[('q0', '2')] = ('q0', '2', 'R')        table[('q0', '3')] = ('q0', '3', 'R')        table[('q0', '4')] = ('q0', '4', 'R')        table[('q0', '5')] = ('q0', '5', 'R')        table[('q0', ' ')] = ('q0', ' ', 'R')        table[('q0', '#')] = ('q1', '#', 'L')  # Знайшли кінець, повертаємось до останньої цифри        table[('q0', None)] = ('q1', '#', 'L')  # Дійшли до кінця стрічки        # q1 - повернулись до останньої цифри другого числа, починаємо віднімання        table[('q1', '0')] = ('q2', '#', 'L')  # Запам'ятовуємо 0        table[('q1', '1')] = ('q3', '#', 'L')  # Запам'ятовуємо 1        table[('q1', '2')] = ('q4', '#', 'L')  # ...        table[('q1', '3')] = ('q5', '#', 'L')        table[('q1', '4')] = ('q6', '#', 'L')        table[('q1', '5')] = ('q7', '#', 'L')        table[('q1', ' ')] = ('q8', ' ', 'L')  # Перейшли до роздільника, далі будемо опрацьовувати перше число        table[('q1', '#')] = ('q8', '#', 'L')  # Якщо друге число порожнє        # Стани q2-q7: запам'ятали цифру другого числа, шукаємо відповідну цифру першого числа        # q2 - запам'ятали 0        table[('q2', ' ')] = ('q2', ' ', 'L')  # Пропускаємо пробіл        table[('q2', '0')] = ('q9', '0', 'L')  # 0-0=0        table[('q2', '1')] = ('q9', '1', 'L')  # 1-0=1        table[('q2', '2')] = ('q9', '2', 'L')  # 2-0=2        table[('q2', '3')] = ('q9', '3', 'L')  # 3-0=3        table[('q2', '4')] = ('q9', '4', 'L')  # 4-0=4        table[('q2', '5')] = ('q9', '5', 'L')  # 5-0=5        # q3 - запам'ятали 1        table[('q3', ' ')] = ('q3', ' ', 'L')  # Пропускаємо пробіл        table[('q3', '0')] = ('q10', '5', 'L')  # 0-1=5 з позичанням        table[('q3', '1')] = ('q9', '0', 'L')  # 1-1=0        table[('q3', '2')] = ('q9', '1', 'L')  # 2-1=1        table[('q3', '3')] = ('q9', '2', 'L')  # 3-1=2        table[('q3', '4')] = ('q9', '3', 'L')  # 4-1=3        table[('q3', '5')] = ('q9', '4', 'L')  # 5-1=4        # q4 - запам'ятали 2        table[('q4', ' ')] = ('q4', ' ', 'L')        table[('q4', '0')] = ('q10', '4', 'L')  # 0-2=4 з позичанням        table[('q4', '1')] = ('q10', '5', 'L')  # 1-2=5 з позичанням        table[('q4', '2')] = ('q9', '0', 'L')  # 2-2=0        table[('q4', '3')] = ('q9', '1', 'L')  # 3-2=1        table[('q4', '4')] = ('q9', '2', 'L')  # 4-2=2        table[('q4', '5')] = ('q9', '3', 'L')  # 5-2=3        # q5 - запам'ятали 3        table[('q5', ' ')] = ('q5', ' ', 'L')        table[('q5', '0')] = ('q10', '3', 'L')  # 0-3=3 з позичанням        table[('q5', '1')] = ('q10', '4', 'L')  # 1-3=4 з позичанням        table[('q5', '2')] = ('q10', '5', 'L')  # 2-3=5 з позичанням        table[('q5', '3')] = ('q9', '0', 'L')  # 3-3=0        table[('q5', '4')] = ('q9', '1', 'L')  # 4-3=1        table[('q5', '5')] = ('q9', '2', 'L')  # 5-3=2        # q6 - запам'ятали 4        table[('q6', ' ')] = ('q6', ' ', 'L')        table[('q6', '0')] = ('q10', '2', 'L')  # 0-4=2 з позичанням        table[('q6', '1')] = ('q10', '3', 'L')  # 1-4=3 з позичанням        table[('q6', '2')] = ('q10', '4', 'L')  # 2-4=4 з позичанням        table[('q6', '3')] = ('q10', '5', 'L')  # 3-4=5 з позичанням        table[('q6', '4')] = ('q9', '0', 'L')  # 4-4=0        table[('q6', '5')] = ('q9', '1', 'L')  # 5-4=1        # q7 - запам'ятали 5        table[('q7', ' ')] = ('q7', ' ', 'L')        table[('q7', '0')] = ('q10', '1', 'L')  # 0-5=1 з позичанням        table[('q7', '1')] = ('q10', '2', 'L')  # 1-5=2 з позичанням        table[('q7', '2')] = ('q10', '3', 'L')  # 2-5=3 з позичанням        table[('q7', '3')] = ('q10', '4', 'L')  # 3-5=4 з позичанням        table[('q7', '4')] = ('q10', '5', 'L')  # 4-5=5 з позичанням        table[('q7', '5')] = ('q9', '0', 'L')  # 5-5=0        # q8 - перейшли до кінця другого числа, переходимо до чистки        table[('q8', '0')] = ('q8', '0', 'L')        table[('q8', '1')] = ('q8', '1', 'L')        table[('q8', '2')] = ('q8', '2', 'L')        table[('q8', '3')] = ('q8', '3', 'L')        table[('q8', '4')] = ('q8', '4', 'L')        table[('q8', '5')] = ('q8', '5', 'L')        table[('q8', None)] = ('q11', None, 'R')  # Дійшли до початку стрічки, почнемо чистку        # q9 - немає потреби позичати, знаходимо наступну цифру        table[('q9', '0')] = ('q9', '0', 'L')        table[('q9', '1')] = ('q9', '1', 'L')        table[('q9', '2')] = ('q9', '2', 'L')        table[('q9', '3')] = ('q9', '3', 'L')        table[('q9', '4')] = ('q9', '4', 'L')        table[('q9', '5')] = ('q9', '5', 'L')        table[('q9', ' ')] = ('q9', ' ', 'L')  # ДОДАНО: обробка пробілу        table[('q9', None)] = ('q11', None, 'R')  # Дійшли до початку стрічки, почнемо чистку        # q10 - потрібно позичити, знаходимо попередній розряд        table[('q10', '0')] = ('q10a', '5', 'L')  # Позичання зі старшого розряду        table[('q10', '1')] = ('q9', '0', 'L')  # 1-1=0, далі без позичання        table[('q10', '2')] = ('q9', '1', 'L')  # 2-1=1, далі без позичання        table[('q10', '3')] = ('q9', '2', 'L')  # 3-1=2, далі без позичання        table[('q10', '4')] = ('q9', '3', 'L')  # 4-1=3, далі без позичання        table[('q10', '5')] = ('q9', '4', 'L')  # 5-1=4, далі без позичання        table[('q10', ' ')] = ('q14', ' ', 'L')  # ДОДАНО: досягли початку числа, обробка від'ємного результату        table[('q10', None)] = ('q14', None, 'R')  # ДОДАНО: обробка від'ємного результату        # q10a - рекурсивне позичання (0 стало 5, але потрібно віднімати 1 з наступного розряду)        table[('q10a', '0')] = ('q10a', '5', 'L')  # Позичання триває        table[('q10a', '1')] = ('q9', '0', 'L')  # 1-1=0, позичання закінчилось        table[('q10a', '2')] = ('q9', '1', 'L')  # 2-1=1, позичання закінчилось        table[('q10a', '3')] = ('q9', '2', 'L')  # і т.д.        table[('q10a', '4')] = ('q9', '3', 'L')        table[('q10a', '5')] = ('q9', '4', 'L')        table[('q10a', ' ')] = ('q14', ' ', 'L')  # ДОДАНО: досягли початку числа, обробка від'ємного результату        table[('q10a', None)] = ('q14', None, 'R')  # ДОДАНО: обробка від'ємного результату        # q11 - очищення: форматуємо результат і йдемо до кінця числа        table[('q11', '0')] = ('q11', '0', 'R')  # Залишаємо цифри результату        table[('q11', '1')] = ('q11', '1', 'R')        table[('q11', '2')] = ('q11', '2', 'R')        table[('q11', '3')] = ('q11', '3', 'R')        table[('q11', '4')] = ('q11', '4', 'R')        table[('q11', '5')] = ('q11', '5', 'R')        table[('q11', ' ')] = ('q12', ' ', 'R')  # Знайшли пробіл, переходимо до видалення другого числа        # q12 - видалення другого числа        table[('q12', '0')] = ('q12', ' ', 'R')  # Замінюємо цифри пробілами        table[('q12', '1')] = ('q12', ' ', 'R')        table[('q12', '2')] = ('q12', ' ', 'R')        table[('q12', '3')] = ('q12', ' ', 'R')        table[('q12', '4')] = ('q12', ' ', 'R')        table[('q12', '5')] = ('q12', ' ', 'R')        table[('q12', '#')] = ('q12', ' ', 'R')  # Замінюємо маркери пробілами        table[('q12', None)] = ('q13', None, 'L')  # Дійшли до кінця стрічки        # q13 - видалення зайвих пробілів в кінці        table[('q13', ' ')] = ('q13', ' ', 'L')        table[('q13', '#')] = ('q13', ' ', 'L')  # ДОДАНО: видалення маркера, якщо він залишився        table[('q13', '0')] = ('qf', '0', 'S')  # Знайшли останню цифру, завершуємо        table[('q13', '1')] = ('qf', '1', 'S')        table[('q13', '2')] = ('qf', '2', 'S')        table[('q13', '3')] = ('qf', '3', 'S')        table[('q13', '4')] = ('qf', '4', 'S')        table[('q13', '5')] = ('qf', '5', 'S')        table[('q13', None)] = ('q15', None, 'R')  # ДОДАНО: якщо результат порожній        # q14 - обробка випадку, коли результат від'ємний (Y > X)        table[('q14', ' ')] = ('q14', ' ', 'L')        table[('q14', None)] = ('q15', None, 'R')        # q15 - виведення повідомлення про помилку або нульовий результат        table[('q15', None)] = ('qf', '0', 'S')  # Записуємо 0 як результат        return table    def load_tape(self, input_str):        """Завантаження вхідних даних на стрічку"""        self.tape = list(input_str)        self.head_position = 0        self.state = 'q0'    def read_symbol(self):        """Читання символу з поточної позиції головки"""        if 0 <= self.head_position < len(self.tape):            return self.tape[self.head_position]        return None  # Позиція за межами стрічки    def write_symbol(self, symbol):        """Запис символу в поточну позицію головки"""        if symbol is not None:  # Не робимо нічого, якщо символ None            # Розширюємо стрічку при необхідності            while self.head_position >= len(self.tape):                self.tape.append(' ')            if self.head_position < 0:                # Розширення стрічки вліво                self.tape = [' '] + self.tape                self.head_position = 0            self.tape[self.head_position] = symbol    def move_head(self, direction):        """Переміщення головки згідно з напрямком"""        if direction == 'L':            self.head_position -= 1        elif direction == 'R':            self.head_position += 1        # 'S' - залишити на місці, нічого не робимо    def step(self):        """Виконання одного кроку машини Тьюрінга"""        current_symbol = self.read_symbol()        # Пошук відповідного переходу в таблиці        if (self.state, current_symbol) in self.transition_table:            new_state, new_symbol, move_direction = self.transition_table[(self.state, current_symbol)]            # Виконуємо перехід            self.write_symbol(new_symbol)            self.move_head(move_direction)            self.state = new_state            return True        else:            # Немає переходу для цього стану та символу            print(f"Помилка: немає переходу для стану {self.state} і символу {current_symbol}")            return False    def run(self, debug=False):        """Запуск машини Тьюрінга до досягнення кінцевого стану"""        steps = 0        while self.state != self.final_state:            if debug:                print(                    f"Стан: {self.state}, Стрічка: {''.join(self.tape)}, Позиція: {self.head_position}, Символ: {self.read_symbol()}")            if not self.step():                break            steps += 1            # Запобігання нескінченних циклів            if steps > 10000:                print("Перевищено максимальну кількість кроків. Можливо, машина зациклилась.")                break        return ''.join(self.tape).strip()  # Повертаємо кінцевий стан стрічкиdef subtract_in_base6(x, y, debug=False):    """Функція для віднімання двох чисел у системі числення з основою 6    Параметри:    x (str): перше число (зменшуване) у системі з основою 6    y (str): друге число (від'ємник) у системі з основою 6    debug (bool): якщо True, виводить детальну інформацію про роботу машини    Повертає:    str: результат віднімання у системі з основою 6    """    # Перевірка валідності введення    for digit in x + y:        if digit not in '012345':            raise ValueError(f"Невірний символ '{digit}'. Вхідні числа повинні містити лише цифри 0-5.")    tm = TuringMachine()    # Додаємо маркер кінця даних    input_with_marker = f"{x} {y}#"    tm.load_tape(input_with_marker)    result = tm.run(debug=debug)    # Очищення результату від службових символів    clean_result = ''.join([c for c in result if c in '012345']).lstrip('0')    if not clean_result:        clean_result = '0'    # Перевірка правильності результату    x_decimal = int(x, 6)    y_decimal = int(y, 6)    if x_decimal >= y_decimal:        expected = x_decimal - y_decimal        expected_base6 = ''        if expected == 0:            expected_base6 = '0'        else:            temp = expected            while temp > 0:                expected_base6 = str(temp % 6) + expected_base6                temp //= 6        if debug:            print(f"Перевірка: {x}₆ - {y}₆ = {expected_base6}₆ ({x_decimal}₁₀ - {y_decimal}₁₀ = {expected}₁₀)")    else:        if debug:            print(f"Попередження: X ({x}₆ = {x_decimal}₁₀) менше ніж Y ({y}₆ = {y_decimal}₁₀).")            print("Результат буде встановлено у 0, оскільки машина не підтримує від'ємні числа.")    return clean_result