import numpy as npimport matplotlib.pyplot as pltimport matplotlibfrom scipy.integrate import quad# Встановлення сумісного бекенду для PyCharmmatplotlib.use('TkAgg')# Аналітичне обчислення через інтегралdef f_m(m):    return (2 * m) / 9  # Щільність ймовірностіdef expected_value():    integral, _ = quad(lambda m: m * f_m(m), 0, 3)    return integral# Моделювання методом Монте-Карлоdef monte_carlo_simulation(n_samples=1000000):    X1 = np.random.uniform(0, 3, n_samples)    X2 = np.random.uniform(0, 3, n_samples)    M = np.maximum(X1, X2)    return np.mean(M), M# Візуалізація розподілу max(X1, X2)def plot_distribution(M):    plt.hist(M, bins=50, density=True, alpha=0.6, color='b', label='Histogram of max(X1, X2)')    x = np.linspace(0, 3, 100)    plt.plot(x, f_m(x), 'r-', lw=2, label='Theoretical PDF')    plt.axvline(expected_value(), color='g', linestyle='--', label='Expected Value')    plt.xlabel('Value')    plt.ylabel('Density')    plt.legend()    plt.title('Distribution of max(X1, X2)')    plt.savefig("distribution_plot.png")  # Збереження графіка у файл    plt.show()# Виведення результатівprint("Аналітичний розрахунок:", expected_value())mean_mc, M_samples = monte_carlo_simulation()print("Монте-Карло (1 млн вибірок):", mean_mc)plot_distribution(M_samples)